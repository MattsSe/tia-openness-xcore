@Ecore(nsURI="http://www.tia.openness.model.org/schemas/SW/PlcBlocks/Access")
@ExtendedMetaData(qualified="false")
@GenModel(bundleManifest="false", forceOverwrite="true",modelDirectory="org.tia.openness.model/src/main/java-gen", modelName="Openness",
	importerID="org.eclipse.xsd.ecore.importer",updateClasspath="false", complianceLevel="8.0")
package org.tia.openness.model.access

import org.tia.openness.model.common.Commentype
import org.tia.openness.model.common.DateAttribute
import org.tia.openness.model.common.IntegerAttribute
import org.tia.openness.model.common.LineComment
import org.tia.openness.model.common.SectionNameTE
import org.tia.openness.model.common.SimaticNameTP
import org.tia.openness.model.common.SimaticTypeTE
import org.tia.openness.model.common.StringAttribute
import org.tia.openness.model.common.Token
import org.tia.openness.model.common.VersionStringTP
import org.eclipse.emf.ecore.EFeatureMapEntry
import org.eclipse.emf.ecore.xml.^type.AnySimpleType



@ExtendedMetaData(name="AbsoluteOffset", kind="empty")
class AbsoluteOffset {
	@GenModel(documentation="Byte * 8 + Bit")
	@ExtendedMetaData(kind="attribute", name="BitOffset", namespace="##targetNamespace")
	unsettable int bitOffset
	@ExtendedMetaData(kind="attribute", name="Type", namespace="##targetNamespace")
	String[1] ^type
}

@ExtendedMetaData(name="Access", kind="elementOnly")
class Access {
	@GenModel(documentation="for NumBLs. NumBLs is informative. Not for LAD/FBD.")
	@ExtendedMetaData(kind="element", name="IntegerAttribute", namespace="##targetNamespace")
	contains IntegerAttribute integerAttribute
	@ExtendedMetaData(kind="element", name="Label", namespace="##targetNamespace")
	contains Label label
	@ExtendedMetaData(kind="element", name="Constant", namespace="##targetNamespace")
	contains Constant constant
	@GenModel(documentation="call of a user block. Not in Graph ActionList.")
	@ExtendedMetaData(kind="element", name="CallInfo", namespace="##targetNamespace")
	contains CallInfoype callInfo
	@GenModel(documentation="call of an instruction. Not for LAD/FBD, Graph ActionList.")
	@ExtendedMetaData(kind="element", name="Instruction", namespace="##targetNamespace")
	contains Instruction instruction
	@GenModel(documentation="STL specific")
	@ExtendedMetaData(kind="element", name="Indirect", namespace="##targetNamespace")
	contains Indirect indirect
	@GenModel(documentation="Only for S7-300/400/WinAC")
	@ExtendedMetaData(kind="element", name="Statusword", namespace="##targetNamespace")
	contains Statusword statusword
	@GenModel(documentation="SCL specific")
	@ExtendedMetaData(kind="element", name="Expression", namespace="##targetNamespace")
	contains Expression expression
	@ExtendedMetaData(kind="element", name="Symbol", namespace="##targetNamespace")
	contains Symbol symbol
	@GenModel(documentation="for absolute addresses")
	@ExtendedMetaData(kind="element", name="Address", namespace="##targetNamespace")
	contains Address address
	@ExtendedMetaData(kind="group", name="group:10")
	EFeatureMapEntry[] group
	@GenModel(documentation="Not allowed in STL")
	@ExtendedMetaData(kind="element", name="Comment", namespace="##targetNamespace", group="group:10")
	contains transient volatile derived Commentype[] comment
	@GenModel(documentation="Not for LAD/FBD ")
	@ExtendedMetaData(kind="element", name="LineComment", namespace="##targetNamespace", group="group:10")
	contains transient volatile derived LineComment[] lineComment
	@ExtendedMetaData(kind="attribute", name="Scope", namespace="##targetNamespace")
	ScopeType[1] scope
	@GenModel(documentation="Not allowed in STL")
	@ExtendedMetaData(kind="attribute", name="UId", namespace="##targetNamespace")
	unsettable int uId
}

@ExtendedMetaData(name="Address", kind="empty")
class Address {
	@ExtendedMetaData(kind="attribute", name="Area", namespace="##targetNamespace")
	unsettable AreaTE[1] area
	@GenModel(documentation="In general it is Byte * 8 + Bit. But if it is used for addressing a DB we will find the number of the DB here (e.g. \"DB12\" ->12).")
	@ExtendedMetaData(kind="attribute", name="BitOffset", namespace="##targetNamespace")
	unsettable int bitOffset
	@GenModel(documentation="for DB access")
	@ExtendedMetaData(kind="attribute", name="BlockNumber", namespace="##targetNamespace")
	unsettable int blockNumber
	@GenModel(documentation="if true, the import unnoted it")
	@ExtendedMetaData(kind="attribute", name="Informative", namespace="##targetNamespace")
	unsettable boolean informative = "false"
	@ExtendedMetaData(kind="attribute", name="Type", namespace="##targetNamespace")
	SimaticNameTP ^type
}

@ExtendedMetaData(name="Area_TE")
enum AreaTE {
	None
	PeripheryInput = 1
	PeripheryOutput = 2
	Input = 3
	Output = 4
	Memory = 5
	FB = 6
	FC = 7
	@GenModel(documentation="partly qualified access with DB register")
	DB = 8
	@GenModel(documentation="partly qualified access with DI register")
	DI = 9
	Timer = 10
	Counter = 11
	@GenModel(documentation="Classic Local Stack")
	Local = 12
}

@ExtendedMetaData(name="Area_TE:Object", baseType="Area_TE")
type AreaTEObject wraps org.eclipse.emf.common.util.Enumerator



@ExtendedMetaData(name="BlockType_TE")
enum BlockTypeTE {
	DB
	FB = 1
	FC = 2
	OB = 3
	UDT = 4
	FBT = 5
	FCT = 6
}

@ExtendedMetaData(name="BlockType_TE:Object", baseType="BlockType_TE")
type BlockTypeTEObject wraps org.eclipse.emf.common.util.Enumerator


@GenModel(documentation="Not for LAD/FBD. ")
@ExtendedMetaData(name="CallInfo", kind="elementOnly")
class CallInfo {
	@GenModel(documentation="for BlockNumber. BlockNumber is informative.")
	@ExtendedMetaData(kind="element", name="IntegerAttribute", namespace="##targetNamespace")
	contains IntegerAttribute integerAttribute
	@GenModel(documentation="for ParameterModifiedTS. ParameterModifiedTS is informative")
	@ExtendedMetaData(kind="element", name="DateAttribute", namespace="##targetNamespace")
	contains DateAttribute dateAttribute
	@ExtendedMetaData(kind="group", name="group:2")
	EFeatureMapEntry[] group
	@GenModel(documentation="Not allowed in STL")
	@ExtendedMetaData(kind="element", name="Comment", namespace="##targetNamespace", group="group:2")
	contains transient volatile derived Commentype[] comment
	@GenModel(documentation="Not for LAD/FBD ")
	@ExtendedMetaData(kind="element", name="LineComment", namespace="##targetNamespace", group="group:2")
	contains transient volatile derived LineComment[] lineComment
	@GenModel(documentation="the COMMA, only if separated. Not for LAD/FBD")
	@ExtendedMetaData(kind="element", name="Token", namespace="##targetNamespace")
	contains Token token
	@ExtendedMetaData(kind="group", name="group:6")
	EFeatureMapEntry[] group1
	@GenModel(documentation="Not allowed in STL")
	@ExtendedMetaData(kind="element", name="Comment", namespace="##targetNamespace", group="group:6")
	contains transient volatile derived Commentype[] comment1
	@GenModel(documentation="Not for LAD/FBD ")
	@ExtendedMetaData(kind="element", name="LineComment", namespace="##targetNamespace", group="group:6")
	contains transient volatile derived LineComment[] lineComment1
	@ExtendedMetaData(kind="element", name="Instance", namespace="##targetNamespace")
	contains Instance instance
	@ExtendedMetaData(kind="element", name="Parameter", namespace="##targetNamespace")
	contains Parameter[] parameter
	@ExtendedMetaData(kind="attribute", name="BlockType", namespace="##targetNamespace")
	unsettable BlockTypeTE[1] blockType
	@ExtendedMetaData(kind="attribute", name="Name", namespace="##targetNamespace")
	SimaticNameTP name
}

@ExtendedMetaData(name="CallInfo_._type", kind="elementOnly")
class CallInfoype extends CallInfo {
}


@ExtendedMetaData(name="Component", kind="elementOnly")
class Component {
	@ExtendedMetaData(kind="element", name="Access", namespace="##targetNamespace")
	contains Access[] access
	@ExtendedMetaData(kind="attribute", name="Name", namespace="##targetNamespace")
	String[1] name
	@ExtendedMetaData(kind="attribute", name="SimpleAccessModifier", namespace="##targetNamespace")
	unsettable SimpleAccessModifierTP simpleAccessModifier = "None"
	@ExtendedMetaData(kind="attribute", name="SliceAccessModifier", namespace="##targetNamespace")
	unsettable SliceAccessModifierTP sliceAccessModifier = "undef"
}

@ExtendedMetaData(name="Constant", kind="elementOnly")
class Constant {
	@ExtendedMetaData(kind="element", name="Constantype", namespace="##targetNamespace")
	contains ConstantypeType Constantype
	@ExtendedMetaData(kind="element", name="ConstantValue", namespace="##targetNamespace")
	contains ConstantValueype constantValue
	@GenModel(documentation="for Format and FormatFlags. They are informative..")
	@ExtendedMetaData(kind="element", name="StringAttribute", namespace="##targetNamespace")
	contains StringAttribute[0..2] stringAttribute
	@ExtendedMetaData(kind="attribute", name="Name", namespace="##targetNamespace")
	SimaticNameTP name
}

@ExtendedMetaData(name="Constantype_._type", kind="simple")
class ConstantypeType {
	@ExtendedMetaData(name=":0", kind="simple")
	String value
	@ExtendedMetaData(kind="attribute", name="Informative", namespace="##targetNamespace")
	unsettable boolean informative
}

@ExtendedMetaData(name="ConstantValue", kind="simple")
class ConstantValue {
	@ExtendedMetaData(name=":0", kind="simple")
	String value
}

@ExtendedMetaData(name="ConstantValue_._type", kind="simple")
class ConstantValueype extends ConstantValue {
	@ExtendedMetaData(kind="attribute", name="Informative", namespace="##targetNamespace")
	unsettable boolean informative
}

@ExtendedMetaData(name="Expression", kind="elementOnly")
class Expression {
	@ExtendedMetaData(kind="group", name="group:0")
	EFeatureMapEntry[] group
	@ExtendedMetaData(kind="element", name="Access", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived Access[] access
	@ExtendedMetaData(kind="element", name="Token", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived Token[] token
	@GenModel(documentation="Not allowed in STL")
	@ExtendedMetaData(kind="element", name="Comment", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived Commentype[] comment
	@GenModel(documentation="Not for LAD/FBD ")
	@ExtendedMetaData(kind="element", name="LineComment", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived LineComment[] lineComment
	@ExtendedMetaData(kind="attribute", name="UId", namespace="##targetNamespace")
	unsettable int uId
}

@ExtendedMetaData(name="FormatFlags_TE", baseType="http://www.eclipse.org/emf/2003/XMLType#string",
	pattern="None ((Lower|Format|Size|Under|Exp|TypeQualifier)(,\\s*)?)*")
type FormatFlagsTE wraps String

@ExtendedMetaData(name="Format_TE")
enum FormatTE {
	Real
	Bin = 1
	DecSigned = 2
	DecUnsigned = 3
	Pointer = 4
	CharSequence = 5
	DecSequence = 6
	Hex = 7
	S5Count = 8
	Time = 9
	Date = 10
	TimeOfDay = 11
	S5Time = 12
	Bool = 13
	Oct = 14
	Bcd = 15
	DateAndTime = 16
	String = 17
	Any = 18
	Number = 19
	Char = 20
	HexSequence = 21
}

@ExtendedMetaData(name="Format_TE:Object", baseType="Format_TE")
type FormatTEObject wraps org.eclipse.emf.common.util.Enumerator


@ExtendedMetaData(name="Indirect", kind="elementOnly")
class Indirect {
	@ExtendedMetaData(kind="group", name="group:0")
	EFeatureMapEntry[] group
	@ExtendedMetaData(kind="element", name="Token", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived Token[] token
	@GenModel(documentation="Not allowed in STL")
	@ExtendedMetaData(kind="element", name="Comment", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived Commentype[] comment
	@GenModel(documentation="Not for LAD/FBD ")
	@ExtendedMetaData(kind="element", name="LineComment", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived LineComment[] lineComment
	@ExtendedMetaData(kind="element", name="Access", namespace="##targetNamespace")
	contains Access access
	@ExtendedMetaData(kind="attribute", name="Area", namespace="##targetNamespace")
	unsettable AreaTE area
	@ExtendedMetaData(kind="attribute", name="BitOffset", namespace="##targetNamespace")
	AnySimpleType bitOffset
	@ExtendedMetaData(kind="attribute", name="Register", namespace="##targetNamespace")
	unsettable RegisterTE register
	@ExtendedMetaData(kind="attribute", name="Width", namespace="##targetNamespace")
	unsettable WidthTE[1] width
}

@ExtendedMetaData(name="Instance", kind="elementOnly")
class Instance {
	@ExtendedMetaData(kind="group", name="group:0")
	EFeatureMapEntry[] group
	@ExtendedMetaData(kind="element", name="Component", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived Component[] component
	@ExtendedMetaData(kind="element", name="AbsoluteOffset", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived AbsoluteOffset[] absoluteOffset
	@GenModel(documentation="the DOT; only if separated. Not in Graph ActionList, not in LAD/FBD.")
	@ExtendedMetaData(kind="element", name="Token", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived Token[] token
	@GenModel(documentation="Not allowed in STL")
	@ExtendedMetaData(kind="element", name="Comment", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived Commentype[] comment
	@GenModel(documentation="Not for LAD/FBD ")
	@ExtendedMetaData(kind="element", name="LineComment", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived LineComment[] lineComment
	@GenModel(documentation="additional address for a symbol. it is informative")
	@ExtendedMetaData(kind="element", name="Address", namespace="##targetNamespace")
	contains Address address
	@ExtendedMetaData(kind="attribute", name="Scope", namespace="##targetNamespace")
	unsettable ScopeTE[1] scope
	@GenModel(documentation="Not allowed in STL")
	@ExtendedMetaData(kind="attribute", name="UId", namespace="##targetNamespace")
	unsettable int uId
}

@ExtendedMetaData(name="Instruction", kind="elementOnly")
class Instruction {
	@ExtendedMetaData(kind="group", name="group:0")
	EFeatureMapEntry[] group
	@GenModel(documentation="Not allowed in STL")
	@ExtendedMetaData(kind="element", name="Comment", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived Commentype[] comment
	@GenModel(documentation="Not for LAD/FBD ")
	@ExtendedMetaData(kind="element", name="LineComment", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived LineComment[] lineComment
	@GenModel(documentation="the COMMA, only if separated")
	@ExtendedMetaData(kind="element", name="Token", namespace="##targetNamespace")
	contains Token token
	@ExtendedMetaData(kind="group", name="group:4")
	EFeatureMapEntry[] group1
	@GenModel(documentation="Not allowed in STL")
	@ExtendedMetaData(kind="element", name="Comment", namespace="##targetNamespace", group="group:4")
	contains transient volatile derived Commentype[] comment1
	@GenModel(documentation="Not for LAD/FBD ")
	@ExtendedMetaData(kind="element", name="LineComment", namespace="##targetNamespace", group="group:4")
	contains transient volatile derived LineComment[] lineComment1
	@ExtendedMetaData(kind="element", name="TemplateValue", namespace="##targetNamespace")
	contains TemplateValue[] templateValue
	@ExtendedMetaData(kind="element", name="Instance", namespace="##targetNamespace")
	contains Instance instance
	@ExtendedMetaData(kind="element", name="Parameter", namespace="##targetNamespace")
	contains Parameter[] parameter
	@ExtendedMetaData(kind="attribute", name="Name", namespace="##targetNamespace")
	NameType[1] name
	@ExtendedMetaData(kind="attribute", name="Version", namespace="##targetNamespace")
	VersionStringTP version
}

@ExtendedMetaData(name="InterfaceFlags_TP", baseType="http://www.eclipse.org/emf/2003/XMLType#string",
	pattern="None ((Mandatory|S7_Visible)(,\\s*)?)*")
type InterfaceFlagsTP wraps String

@ExtendedMetaData(name="Label", kind="empty")
class Label {
	@ExtendedMetaData(kind="attribute", name="Name", namespace="##targetNamespace")
	SimaticNameTP[1] name
}


@ExtendedMetaData(name="Name_._type", baseType="SimaticName_TP", minLength="1")
type NameType wraps String

@ExtendedMetaData(name="Parameter", kind="elementOnly")
class Parameter {
	@GenModel(documentation="for NumBLs. NumBLs is informative")
	@ExtendedMetaData(kind="element", name="IntegerAttribute", namespace="##targetNamespace")
	contains IntegerAttribute integerAttribute
	@GenModel(documentation="for InterfaceFlags. InterfaceFlags is informative\nThe type of the value should be InterfaceFlags_TP\nThe default value is \"S7_Visible\"")
	@ExtendedMetaData(kind="element", name="StringAttribute", namespace="##targetNamespace")
	contains StringAttribute stringAttribute
	@ExtendedMetaData(kind="group", name="group:2")
	EFeatureMapEntry[] group
	@GenModel(documentation="Not allowed in STL")
	@ExtendedMetaData(kind="element", name="Comment", namespace="##targetNamespace", group="group:2")
	contains transient volatile derived Commentype[] comment
	@GenModel(documentation="Not for LAD/FBD ")
	@ExtendedMetaData(kind="element", name="LineComment", namespace="##targetNamespace", group="group:2")
	contains transient volatile derived LineComment[] lineComment
	@ExtendedMetaData(kind="element", name="Access", namespace="##targetNamespace")
	contains Access access
	@ExtendedMetaData(kind="group", name="group:6")
	EFeatureMapEntry[] group1
	@GenModel(documentation="Not allowed in STL")
	@ExtendedMetaData(kind="element", name="Comment", namespace="##targetNamespace", group="group:6")
	contains transient volatile derived Commentype[] comment1
	@GenModel(documentation="Not for LAD/FBD ")
	@ExtendedMetaData(kind="element", name="LineComment", namespace="##targetNamespace", group="group:6")
	contains transient volatile derived LineComment[] lineComment1
	@ExtendedMetaData(kind="attribute", name="Name", namespace="##targetNamespace")
	SimaticNameTP[1] name
	@ExtendedMetaData(kind="attribute", name="Section", namespace="##targetNamespace")
	unsettable SectionNameTE section
	@ExtendedMetaData(kind="attribute", name="TemplateReference", namespace="##targetNamespace")
	String templateReference
	@ExtendedMetaData(kind="attribute", name="Type", namespace="##targetNamespace")
	SimaticTypeTE ^type
}

@ExtendedMetaData(name="Register_TE")
enum RegisterTE {
	AR1
	AR2 = 1
}

@ExtendedMetaData(name="Register_TE:Object", baseType="Register_TE")
type RegisterTEObject wraps org.eclipse.emf.common.util.Enumerator

@ExtendedMetaData(name="Scope_TE")
enum ScopeTE {
	@GenModel(documentation="Symbols we do not know what they are")
	Undef
	GlobalConstant = 1
	LocalConstant = 2
	GlobalVariable = 3
	LocalVariable = 4
	Instruction = 5
	Label = 6
	TypedConstant = 7
	AddressConstant = 8
	LiteralConstant = 9
	AlarmConstant = 10
	Address = 11
	Statusword = 12
	Expression = 13
	Unnamed = 14
	Call = 15
	CallWithType = 16
}

@ExtendedMetaData(name="Scope_TE:Object", baseType="Scope_TE")
type ScopeTEObject wraps org.eclipse.emf.common.util.Enumerator

@ExtendedMetaData(name="Scope_._type", baseType="Scope_TE")
type ScopeType wraps org.eclipse.emf.common.util.Enumerator


@ExtendedMetaData(name="SimpleAccessModifier_TP", baseType="http://www.eclipse.org/emf/2003/XMLType#string",
	pattern="None|((Periphery|QualityInformation)(,\\s*)?)*")
type SimpleAccessModifierTP wraps String

@ExtendedMetaData(name="SimpleType_TE")
enum SimpleTypeTE {
	undef
	Bool = 1
	Byte = 2
	Char = 3
	Word = 4
	Int = 5
	DWord = 6
	DInt = 7
	Real = 8
	LReal = 9
	Timer = 10
	S5Time = 11
	ARef = 12
	Any = 13
	Time = 14
	S5Count = 15
	Counter = 16
	BlockDB as "Block_DB" = 17
	BlockFB as "Block_FB" = 18
	BlockFC as "Block_FC" = 19
	BlockSFB as "Block_SFB" = 20
	BlockUDT as "Block_UDT" = 21
	MultiFB as "Multi_FB" = 22
	MultiSFB as "Multi_SFB" = 23
}

@ExtendedMetaData(name="SimpleType_TE:Object", baseType="SimpleType_TE")
type SimpleTypeTEObject wraps org.eclipse.emf.common.util.Enumerator

@ExtendedMetaData(name="SliceAccessModifier_TP", baseType="http://www.eclipse.org/emf/2003/XMLType#string",
	pattern="([xbwdXBWD]\\d+)|undef")
type SliceAccessModifierTP wraps String

@ExtendedMetaData(name="Statusword", kind="empty")
class Statusword {
	@ExtendedMetaData(kind="attribute", name="Combination", namespace="##targetNamespace")
	unsettable StatuswordE[1] combination
}

@ExtendedMetaData(name="Statusword_TE")
enum StatuswordE {
	BR
	OV = 1
	OS = 2
	EQ = 3
	NE = 4
	GT = 5
	LT = 6
	GE = 7
	LE = 8
	UO = 9
	NU = 10
	STW = 11
}

@ExtendedMetaData(name="Statusword_TE:Object", baseType="Statusword_TE")
type StatuswordEObject wraps org.eclipse.emf.common.util.Enumerator

@ExtendedMetaData(name="Symbol", kind="elementOnly")
class Symbol {
	@ExtendedMetaData(kind="group", name="group:0")
	EFeatureMapEntry[] group
	@ExtendedMetaData(kind="element", name="Component", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived Component[] component
	@ExtendedMetaData(kind="element", name="AbsoluteOffset", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived AbsoluteOffset[] absoluteOffset
	@GenModel(documentation="the DOT; only if separated. Not in Graph ActionList, not in LAD/FBD.")
	@ExtendedMetaData(kind="element", name="Token", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived Token[] token
	@GenModel(documentation="Not allowed in STL")
	@ExtendedMetaData(kind="element", name="Comment", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived Commentype[] comment
	@GenModel(documentation="Not for LAD/FBD ")
	@ExtendedMetaData(kind="element", name="LineComment", namespace="##targetNamespace", group="group:0")
	contains transient volatile derived LineComment[] lineComment
	@GenModel(documentation="additional address for a symbol. it is informative")
	@ExtendedMetaData(kind="element", name="Address", namespace="##targetNamespace")
	contains Address address
	@ExtendedMetaData(kind="attribute", name="Scope", namespace="##targetNamespace")
	unsettable ScopeTE scope
	@GenModel(documentation="Not allowed in STL")
	@ExtendedMetaData(kind="attribute", name="UId", namespace="##targetNamespace")
	unsettable int uId
}

@ExtendedMetaData(name="TemplateType_TE")
enum TemplateTypeTE {
	Cardinality
	Type = 1
	Operation = 2
}

@ExtendedMetaData(name="TemplateType_TE:Object", baseType="TemplateType_TE")
type TemplateTypeTEObject wraps org.eclipse.emf.common.util.Enumerator

@ExtendedMetaData(name="TemplateValue", kind="simple")
class TemplateValue {
	@ExtendedMetaData(name=":0", kind="simple")
	String value
	@ExtendedMetaData(kind="attribute", name="Name", namespace="##targetNamespace")
	SimaticNameTP[1] name
	@ExtendedMetaData(kind="attribute", name="Type", namespace="##targetNamespace")
	unsettable TemplateTypeTE[1] ^type
}

@ExtendedMetaData(name="Width_TE")
enum WidthTE {
	None
	Bit = 1
	Byte = 2
	Word = 3
	Offset = 4
	Double = 5
	Pointer = 6
	Long = 7
	Any = 8
	Block = 9
}

@ExtendedMetaData(name="Width_TE:Object", baseType="Width_TE")
type WidthTEObject wraps org.eclipse.emf.common.util.Enumerator
